import os
from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import TextMessage, TextSendMessage
from google.auth.transport.requests import Request
from google.oauth2 import service_account
from googleapiclient.discovery import build
from google.auth import exceptions

# Initialize your Flask app
app = Flask(__name__)

# Replace these with your LINE Bot credentials
LINE_CHANNEL_ACCESS_TOKEN = "SXjMzQNaFx3d3N3gX5s34hISQoESI1XdqhQzOC+mepUiEy03s5Wm90MvujopWxy0ig/IKbdAO17Dl84qK+B0yZYH6MJqXgDb/yYvHGl5yM4xqkWPrhhkVGrMsF7U4Wgir0+ZHiI5UCMgz/LbjVFbRwdB04t89/1O/w1cDnyilFU="  # Replace with your LINE token
LINE_CHANNEL_SECRET = "fb97f860ddf454f1e67a71246842381d"  # Replace with your LINE secret

# Setup LINE API
line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)

# Replace this with your Gemini API logic
def process_with_gemini(message):
    """Function to call Gemini API and get response"""
    try:
        # Set up your Google credentials (use the service account credentials file)
        credentials = service_account.Credentials.from_service_account_file(
            'path/to/your/credentials.json',  # Path to your Google credentials JSON file
            scopes=['https://www.googleapis.com/auth/cloud-platform']
        )

        # Create the Gemini API client
        gemini_service = build('gemini', 'v1', credentials=credentials)

        # Replace this with the actual Gemini API method you'd like to call
        response = gemini_service.some_method().execute()

        # Example of how to handle the response, modify as needed
        gemini_result = response.get('result', 'No result returned from Gemini.')

        return gemini_result

    except exceptions.GoogleAuthError as e:
        return f"Authentication error: {str(e)}"
    except Exception as e:
        return f"Error during Gemini API call: {str(e)}"

@app.route("/callback", methods=['POST'])
def callback():
    """Handle the callback from LINE"""
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return 'OK'

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    """Handle the received message from LINE users"""
    user_message = event.message.text
    gemini_response = process_with_gemini(user_message)  # Call the Gemini API here
    
    # Send back the response from Gemini API to the user
    line_bot_api.reply_message(
        event.reply_token,
        TextSendMessage(text=gemini_response))  # Send the processed message back to the user

if __name__ == "__main__":
    port = int(os.environ.get('PORT', 5000))  # Get the port from Heroku or use 5000 as fallback
    app.run(host='0.0.0.0', port=port)  # Start the Flask app
